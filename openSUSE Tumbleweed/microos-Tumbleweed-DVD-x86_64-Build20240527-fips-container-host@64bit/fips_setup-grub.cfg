#
# DO NOT EDIT THIS FILE
#
# It is automatically generated by grub2-mkconfig using templates
# from /etc/grub.d and settings from /etc/default/grub
#

### BEGIN /etc/grub.d/00_header ###
set btrfs_relative_path="y"
export btrfs_relative_path
if [ -f ${config_directory}/grubenv ]; then
  load_env -f ${config_directory}/grubenv
elif [ -s $prefix/grubenv ]; then
  load_env
fi

if [ "${env_block}" ] ; then
  set env_block="(${root})${env_block}"
  export env_block
  load_env -f "${env_block}"
fi

if [ "${next_entry}" ] ; then
   set default="${next_entry}"
   set next_entry=
   save_env next_entry
   if [ "${env_block}" ] ; then
     save_env -f "${env_block}" next_entry
   fi
   set boot_once=true
else
   set default="${saved_entry}"
fi

if [ x"${feature_menuentry_id}" = xy ]; then
  menuentry_id_option="--id"
else
  menuentry_id_option=""
fi

export menuentry_id_option

if [ "${prev_saved_entry}" ]; then
  set saved_entry="${prev_saved_entry}"
  save_env saved_entry
  set prev_saved_entry=
  save_env prev_saved_entry
  set boot_once=true
fi

function savedefault {
  if [ -z "${boot_once}" ]; then
    saved_entry="${chosen}"
    if [ "${env_block}" ] ; then
      save_env -f "${env_block}" saved_entry
    else
      save_env saved_entry
    fi

  fi
}

function load_video {
  if [ x$feature_all_video_module = xy ]; then
    insmod all_video
  else
    insmod efi_gop
    insmod efi_uga
    insmod ieee1275_fb
    insmod vbe
    insmod vga
    insmod video_bochs
    insmod video_cirrus
  fi
}

if [ x$feature_default_font_path = xy ] ; then
   font=unicode
else
insmod part_gpt
insmod btrfs
set root='hd0,gpt2'
if [ x$feature_platform_search_hint = xy ]; then
  search --no-floppy --fs-uuid --set=root --hint='hd0,gpt2'  598ec210-8722-416f-b782-e6903f7b7c2e
else
  search --no-floppy --fs-uuid --set=root 598ec210-8722-416f-b782-e6903f7b7c2e
fi
    font="/usr/share/grub2/unicode.pf2"
fi

if loadfont $font ; then
  if [ "${grub_platform}" = "efi" ]; then
    echo "Please press 't' to show the boot menu on this console"
  fi

  set gfxmode=auto
  load_video
  insmod gfxterm
fi
terminal_input console

for i in gfxterm; do
  if [ x${use_append} = xtrue ]; then
     terminal_output --append $i
  elif terminal_output $i; then
     use_append=true;
  fi
done

insmod part_gpt
insmod btrfs
set root='hd0,gpt2'
if [ x$feature_platform_search_hint = xy ]; then
  search --no-floppy --fs-uuid --set=root --hint='hd0,gpt2'  598ec210-8722-416f-b782-e6903f7b7c2e
else
  search --no-floppy --fs-uuid --set=root 598ec210-8722-416f-b782-e6903f7b7c2e
fi
insmod gfxmenu
loadfont ($root)/boot/grub2/themes/openSUSE/DejaVuSans-Bold14.pf2
loadfont ($root)/boot/grub2/themes/openSUSE/DejaVuSans10.pf2
loadfont ($root)/boot/grub2/themes/openSUSE/DejaVuSans12.pf2
loadfont ($root)/boot/grub2/themes/openSUSE/ascii.pf2
insmod png
set theme=($root)/boot/grub2/themes/openSUSE/theme.txt
export theme
if [ x${boot_once} = xtrue ]; then
  set timeout=0
elif [ x$feature_timeout_style = xy ] ; then
  set timeout_style=menu
  set timeout=-1
# Fallback normal timeout code in case the timeout_style feature is
# unavailable.
else
  set timeout=-1
fi
if [ -n "$extra_cmdline" ]; then
  menuentry "Help on bootable snapshot #$snapshot_num" {
    echo "Select the default entry of the snapshot boot menu."
    echo "Examine the snapshot, and if it's OK,"
    echo "   run 'snapper rollback' and reboot."
    echo "See 'System Rollback by Booting from Snapshots'"
    echo "   in the manual for more information."
    echo "  ** Hit Any Key to return to boot menu **  "
    read
  }
fi
### END /etc/grub.d/00_header ###

### BEGIN /etc/grub.d/01_suse_ro_root ###
# On read-only root file systems /boot/writable provides a writeable
# subvolume, e.g. to store the GRUB environment block.
set boot_rw_subvol=/boot/writable
if [ "${root}" != "host" ]; then
  btrfs-mount-subvol "(${root})" "${boot_rw_subvol}" "/@/boot/writable"
fi

# Use above location to load GRUB environment variables
if [ -f ${boot_rw_subvol}/grubenv ]; then
  load_env -f ${boot_rw_subvol}/grubenv
fi
# btrfs header always beats config file
if [ "${env_block}" ] ; then
  load_env -f "${env_block}"
fi
### END /etc/grub.d/01_suse_ro_root ###

### BEGIN /etc/grub.d/05_crypttab ###
### END /etc/grub.d/05_crypttab ###

### BEGIN /etc/grub.d/05_health_check ###
# Only consider showing a fallback entry on the top level menu
if [ -z "${chosen}" -a -z "${boot_once}" ]; then
  # If flag is set on boot the last start seems to have failed - the flag
  # should have been cleared by userspace
  if [ "${health_checker_flag}" -ge 1 ]; then
    # Reset flag; it will be set again by a supported menu entry.
    # This prevents getting stuck in a loop when booting an entry that
    # doesn't support this flag yet.
    health_checker_flag=0
    if [ "${env_block}" ] ; then
      save_env -f "${env_block}" health_checker_flag
    fi
    # Try to mount /var/lib/misc from know subvolume locations
    btrfs-mount-subvol (${root}) /var /@/var
    btrfs-mount-subvol (${root}) /var/lib/misc /@/var/lib/misc

    if [ -e /var/lib/misc/health-checker.state ]; then
      source /var/lib/misc/health-checker.state
      if [ -n ${LAST_WORKING_SNAPSHOT} ]; then
        LAST_WORKING_SNAPSHOTS=${LAST_WORKING_SNAPSHOT}
      fi
    fi

    # Backwards compatibility (for state file created with old
    # health-checker versions):
    # Due to boo#1048088 btrfs-list-subvols currently doesn't give a list of
    # subvolumes, so it's not possible to map
    # /var/lib/misc/health-checker.state to a snapshot directory; use
    # transactional-update state file as a workaround.
    if [ -z ${LAST_WORKING_SNAPSHOTS} -a -e /var/lib/misc/transactional-update.state ]; then
      source /var/lib/misc/transactional-update.state
    fi

    if [ -n "${LAST_WORKING_SNAPSHOTS}" ]; then
      btrfs-mount-subvol ($root) /.snapshots @/.snapshots
      for snapshot in ${LAST_WORKING_SNAPSHOTS}; do
        if [ -e "/.snapshots/${snapshot}/grub-snapshot.cfg" ]; then
          menuentry "Previous boot failed; booting snapshot ${snapshot}" { true; }
          source /.snapshots/${snapshot}/grub-snapshot.cfg
          menuentry "________________" { true; }
          set default=1
          break
        fi;
      done
    fi
  fi
fi
### END /etc/grub.d/05_health_check ###

### BEGIN /etc/grub.d/10_linux ###
menuentry 'openSUSE MicroOS'  --class opensuse --class gnu-linux --class gnu --class os $menuentry_id_option 'gnulinux-simple-598ec210-8722-416f-b782-e6903f7b7c2e' {
	health_checker_flag=1
	if [ "${env_block}" ] ; then
		save_env -f "${env_block}" health_checker_flag
	fi
	load_video
	set gfxpayload=keep
	insmod gzio
	insmod part_gpt
	insmod btrfs
	set root='hd0,gpt2'
	if [ x$feature_platform_search_hint = xy ]; then
	  search --no-floppy --fs-uuid --set=root --hint='hd0,gpt2'  598ec210-8722-416f-b782-e6903f7b7c2e
	else
	  search --no-floppy --fs-uuid --set=root 598ec210-8722-416f-b782-e6903f7b7c2e
	fi
	echo	'Loading Linux 6.9.1-1-default ...'
	linux	/boot/vmlinuz-6.9.1-1-default root=UUID=598ec210-8722-416f-b782-e6903f7b7c2e  ${extra_cmdline} splash=silent console=ttyS0 console=tty kernel.softlockup_panic=1 swapaccount=1 quiet security=selinux selinux=1 enforcing=1 mitigations=auto
	echo	'Loading initial ramdisk ...'
	initrd	/boot/initrd-6.9.1-1-default
}
submenu 'Advanced options for openSUSE MicroOS' --hotkey=1 $menuentry_id_option 'gnulinux-advanced-598ec210-8722-416f-b782-e6903f7b7c2e' {
	menuentry 'openSUSE MicroOS, with Linux 6.9.1-1-default' --hotkey=2 --class opensuse --class gnu-linux --class gnu --class os $menuentry_id_option 'gnulinux-6.9.1-1-default-advanced-598ec210-8722-416f-b782-e6903f7b7c2e' {
		load_video
		set gfxpayload=keep
		insmod gzio
		insmod part_gpt
		insmod btrfs
		set root='hd0,gpt2'
		if [ x$feature_platform_search_hint = xy ]; then
		  search --no-floppy --fs-uuid --set=root --hint='hd0,gpt2'  598ec210-8722-416f-b782-e6903f7b7c2e
		else
		  search --no-floppy --fs-uuid --set=root 598ec210-8722-416f-b782-e6903f7b7c2e
		fi
		echo	'Loading Linux 6.9.1-1-default ...'
		linux	/boot/vmlinuz-6.9.1-1-default root=UUID=598ec210-8722-416f-b782-e6903f7b7c2e  ${extra_cmdline} splash=silent console=ttyS0 console=tty kernel.softlockup_panic=1 swapaccount=1 quiet security=selinux selinux=1 enforcing=1 mitigations=auto
		echo	'Loading initial ramdisk ...'
		initrd	/boot/initrd-6.9.1-1-default
	}
	menuentry 'openSUSE MicroOS, with Linux 6.9.1-1-default (recovery mode)' --hotkey=3 --class opensuse --class gnu-linux --class gnu --class os $menuentry_id_option 'gnulinux-6.9.1-1-default-recovery-598ec210-8722-416f-b782-e6903f7b7c2e' {
		load_video
		set gfxpayload=keep
		insmod gzio
		insmod part_gpt
		insmod btrfs
		set root='hd0,gpt2'
		if [ x$feature_platform_search_hint = xy ]; then
		  search --no-floppy --fs-uuid --set=root --hint='hd0,gpt2'  598ec210-8722-416f-b782-e6903f7b7c2e
		else
		  search --no-floppy --fs-uuid --set=root 598ec210-8722-416f-b782-e6903f7b7c2e
		fi
		echo	'Loading Linux 6.9.1-1-default ...'
		linux	/boot/vmlinuz-6.9.1-1-default root=UUID=598ec210-8722-416f-b782-e6903f7b7c2e single  ${extra_cmdline}
		echo	'Loading initial ramdisk ...'
		initrd	/boot/initrd-6.9.1-1-default
	}
}

### END /etc/grub.d/10_linux ###

### BEGIN /etc/grub.d/20_linux_xen ###

### END /etc/grub.d/20_linux_xen ###

### BEGIN /etc/grub.d/25_bli ###
if [ "$grub_platform" = "efi" ]; then
  insmod bli
fi
### END /etc/grub.d/25_bli ###

### BEGIN /etc/grub.d/30_os-prober ###
### END /etc/grub.d/30_os-prober ###

### BEGIN /etc/grub.d/30_uefi-firmware ###
if [ "$grub_platform" = "efi" ]; then
	menuentry 'UEFI Firmware Settings' $menuentry_id_option 'uefi-firmware' {
                fwsetup --is-supported
                if [ "$?" = 0 ]; then
                        fwsetup
                else
                        echo "Your firmware doesn't support setup menu entry from a boot loader"
                        echo "Press any key to return ..."
                        read
                fi
        }
fi
### END /etc/grub.d/30_uefi-firmware ###

### BEGIN /etc/grub.d/40_custom ###
# This file provides an easy way to add custom menu entries.  Simply type the
# menu entries you want to add after this comment.  Be careful not to change
# the 'exec tail' line above.
### END /etc/grub.d/40_custom ###

### BEGIN /etc/grub.d/41_custom ###
if [ -f  ${config_directory}/custom.cfg ]; then
  source ${config_directory}/custom.cfg
elif [ -z "${config_directory}" -a -f  $prefix/custom.cfg ]; then
  source $prefix/custom.cfg
fi
### END /etc/grub.d/41_custom ###

### BEGIN /etc/grub.d/80_suse_btrfs_snapshot ###
btrfs-mount-subvol ($root) /.snapshots @/.snapshots
if [ -f "/.snapshots/grub-snapshot.cfg" ]; then
  source "/.snapshots/grub-snapshot.cfg"
fi
### END /etc/grub.d/80_suse_btrfs_snapshot ###

### BEGIN /etc/grub.d/83_health_check_marker ###
# Prevent infinite waiting for disk if drivers in initrd are broken
extra_cmdline="${extra_cmdline} rd.timeout=60 rd.retry=45"
### END /etc/grub.d/83_health_check_marker ###

### BEGIN /etc/grub.d/90_persistent ###
### END /etc/grub.d/90_persistent ###

### BEGIN /etc/grub.d/95_textmode ###
if [ "${grub_platform}" = "efi" ]; then
  # On EFI systems we can only have graphics *or* serial, so allow the user
  # to switch between the two
  hiddenentry 'Text mode' --hotkey 't' {
    set textmode=true
    terminal_output console
  }
fi
### END /etc/grub.d/95_textmode ###
